{"version":3,"sources":["Todo-List/Table.jsx","Todo-List/Input.jsx","Todo-List/TodoList.jsx","index.js"],"names":["Table","props","list","handleDelete","isEdit","handleEdit","className","children","map","item","key","ID","date","Val","onClick","Input","InputVal","handleKeyPress","handleAddBtn","handleInputChange","placeValue","undefined","placeholder","type","value","onChange","onKeyPress","TodoList","getDate","today","Date","AddZero","getMonth","getHours","getMinutes","getSeconds","val","state","objID","List","length","updatedList","push","setState","localStorage","setItem","JSON","stringify","event","target","id","filter","handleEditChange","EditVal","handleEditBtn","editID","handleEditKeyPress","AddEditedValue","tempList","i","listval","getItem","parse","this","Component","App","ReactDOM","render","document","getElementById"],"mappings":"uNA4BeA,EA1BH,SAACC,GAAS,IACXC,EAAuCD,EAAvCC,KAAKC,EAAkCF,EAAlCE,aAAaC,EAAqBH,EAArBG,OAAOC,EAAcJ,EAAdI,WAChC,OACI,2BAAOC,UAAU,QACb,+BACEF,EACD,4BACI,4BAAKH,EAAMM,WAGfL,EAAKM,KAAI,SAAAC,GAAI,OACV,wBAAIC,IAAKD,EAAKE,IACV,4BAAI,0BAAML,UAAU,QAAQG,EAAKG,OACjC,4BAAI,8BAAOH,EAAKI,MAChB,4BACI,4BAAQP,UAAU,aAAaQ,QAAS,kBAAIX,EAAaM,EAAKE,MAA9D,UACA,4BAAQL,UAAU,WAAWQ,QAAS,kBAAIT,EAAWI,EAAKE,MAA1D,gBCFTI,EAbF,SAACd,GAAS,IACZe,EAA0Df,EAA1De,SAASC,EAAiDhB,EAAjDgB,eAAeC,EAAkCjB,EAAlCiB,aAAaC,EAAqBlB,EAArBkB,kBACtCC,OAAiCC,IAApBpB,EAAMqB,YAAwBrB,EAAMqB,YAAY,oBAEnE,OACI,yBAAKhB,UAAU,YAEf,2BAAOiB,KAAK,OAAOjB,UAAU,QAAQkB,MAAOR,EAAUM,YAAaF,EAAYK,SAAUN,EAAmBO,WAAYT,IACxH,2BAAOM,KAAK,SAASjB,UAAU,SAASQ,QAASI,EAAcM,MAAM,UC4G9DG,G,wDAhHX,aAAc,IAAD,uBACT,gBAiBJC,QAAQ,WACJ,IAAIC,EAAQ,IAAIC,KAEhB,MAAM,GAAN,OAAW,EAAKC,QAAQF,EAAMD,WAA9B,YAA4C,EAAKG,QAAQF,EAAMG,WAAW,GAA1E,cAAkF,EAAKD,QAAQF,EAAMI,YAArG,YAAoH,EAAKF,QAAQF,EAAMK,cAAvI,YAAwJ,EAAKH,QAAQF,EAAMM,gBArBlK,EAwBbJ,QAAQ,SAACK,GAEL,OADAA,EAAOA,EAAI,GAAK,IAAMA,EAAMA,GAzBnB,EA6BblB,aAAa,WAET,GAAyB,KAAtB,EAAKmB,MAAMrB,SAAc,CACxB,IAAMJ,EAAO,EAAKgB,UAEdU,EAAiC,IAAzB,EAAKD,MAAME,KAAKC,OAAW,EAAE,EAAKH,MAAME,KAAK,EAAKF,MAAME,KAAKC,OAAO,GAAG7B,GAAG,EAClF8B,EAAc,EAAKJ,MAAME,KAE7BE,EAAYC,KAAK,CACb9B,OACAC,IAAK,EAAKwB,MAAMrB,SAChBL,GAAI2B,IAER,EAAKK,SAAS,CAACJ,KAAME,EAAYzB,SAAU,KAAI,kBAAI4B,aAAaC,QAAQ,OAAOC,KAAKC,UAAU,EAAKV,MAAME,YA1CpG,EA8CbtB,eAAe,SAAC+B,GACG,UAAZA,EAAMtC,KACL,EAAKQ,gBAhDA,EAoDbC,kBAAkB,SAAC6B,GACf,EAAKL,SAAS,CAAC3B,SAASgC,EAAMC,OAAOzB,SArD5B,EAyDbrB,aAAa,SAAA+C,GACV,IAAMT,EAAc,EAAKJ,MAAME,KAAKY,QAAO,SAAA1C,GAAI,OAAEA,EAAKE,KAAKuC,KAC3D,EAAKP,SAAS,CAACJ,KAAME,IAAa,kBAAIG,aAAaC,QAAQ,OAAOC,KAAKC,UAAU,EAAKV,MAAME,WA3DlF,EA8Dba,iBAAiB,SAACJ,GACd,EAAKL,SAAS,CAACU,QAAQL,EAAMC,OAAOzB,SA/D3B,EAkEb8B,cAAc,SAAC3C,GACX,EAAKgC,SAAS,CAACvC,QAAQ,EAAKmD,OAAQ5C,KAnE3B,EAqEb6C,mBAAmB,SAACR,GACD,UAAZA,EAAMtC,KACL,EAAK+C,kBAvEA,EA0EbA,eAAe,WAEX,IADA,IAAIC,EAAW,EAAKrB,MAAME,KAClBoB,EAAE,EAAGA,EAAE,EAAKtB,MAAME,KAAKC,OAAQmB,IACnC,GAAGD,EAASC,GAAGhD,KAAK,EAAK0B,MAAMkB,OAAO,CAClCG,EAASC,GAAG9C,IAAM,EAAKwB,MAAMgB,QAC7B,MAGR,EAAKV,SAAS,CAACJ,KAAMmB,EAAStD,QAAQ,EAAMiD,QAAS,KAAI,kBAAIT,aAAaC,QAAQ,OAAOC,KAAKC,UAAU,EAAKV,MAAME,WAhFnH,IAAIqB,EAAQ,GACZ,GAAGhB,aAAa1C,KAAK,CACjB,IAAIkC,EAAMQ,aAAaiB,QAAQ,QAC/BD,EAAUd,KAAKgB,MAAM1B,QAErBQ,aAAaC,QAAQ,OAAOC,KAAKC,UAAUa,IAPtC,OAST,EAAKvB,MAAM,CACPE,KAAOqB,EACP5C,SAAW,GACXqC,QAAU,GACVE,OAAQ,EACRnD,QAAS,GAdJ,E,qDAqFH,IAAD,EACoB2D,KAAK1B,MAAvBE,EADF,EACEA,KAAMvB,EADR,EACQA,SACb,OACI,yBAAKV,UAAU,aACb,wBAAIA,UAAU,WAAd,aAEA,kBAAC,EAAD,CACEU,SAAUA,EACVE,aAAc6C,KAAK7C,aACnBC,kBAAmB4C,KAAK5C,kBACxBF,eAAgB8C,KAAK9C,iBAGvB,kBAAC,EAAD,CAAOf,KAAMqC,EAAMpC,aAAc4D,KAAK5D,aAAcE,WAAY0D,KAAKT,cAAelD,OAAQ2D,KAAK1B,MAAMjC,QACnG,kBAAC,EAAD,CACEY,SAAU+C,KAAK1B,MAAMgB,QACrBnC,aAAc6C,KAAKN,eACnBtC,kBAAmB4C,KAAKX,iBACxB9B,YAAY,OACZL,eAAgB8C,KAAKP,2B,GAzGlBQ,cCHvB,SAASC,IACP,OACE,kBAAC,EAAD,MAIJC,IAASC,OAAO,kBAACF,EAAD,MAAOG,SAASC,eAAe,W","file":"static/js/main.c536a25c.chunk.js","sourcesContent":["import React from 'react';\r\n     \r\nconst Table=(props)=>{\r\n    const {list,handleDelete,isEdit,handleEdit} = props\r\n    return(\r\n        <table className=\"list\">\r\n            <tbody>\r\n             {isEdit?\r\n             <tr>\r\n                 <td>{props.children}</td>\r\n             </tr>\r\n             :\r\n             list.map(item=>\r\n                <tr key={item.ID}>\r\n                    <td><span className=\"time\">{item.date}</span></td>\r\n                    <td><span>{item.Val}</span></td>\r\n                    <td>\r\n                        <button className=\"DeleteItem\" onClick={()=>handleDelete(item.ID)}>Delete</button>\r\n                        <button className=\"EditItem\" onClick={()=>handleEdit(item.ID)}>Edit</button>\r\n                    </td>\r\n                </tr>\r\n             )\r\n            }\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default Table","import React from 'react'\r\n\r\n// Stateless input Function\r\nconst Input =(props)=>{\r\n    const {InputVal,handleKeyPress,handleAddBtn,handleInputChange} = props\r\n    const placeValue = props.placeholder!==undefined?props.placeholder:\"Add Value to List\"\r\n\r\n    return(\r\n        <div className=\"InputVal\">\r\n        {/* User will have an extra option to submit value either on button press or 'Enter' Keypress  */}\r\n        <input type=\"text\" className=\"Value\" value={InputVal} placeholder={placeValue} onChange={handleInputChange} onKeyPress={handleKeyPress}/>\r\n        <input type=\"button\" className=\"AddBtn\" onClick={handleAddBtn} value='Add'/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input","import React, { Component } from 'react'\r\nimport Table from './Table.jsx'\r\nimport Input from './Input.jsx'\r\nimport './TodoList.css'\r\n\r\n\r\nclass TodoList extends Component {\r\n    constructor(){\r\n        super()\r\n        let listval=[]\r\n        if(localStorage.list){\r\n            let val = localStorage.getItem('list')\r\n            listval = JSON.parse(val)\r\n        }else{\r\n            localStorage.setItem(\"list\",JSON.stringify(listval))\r\n        }\r\n        this.state={\r\n            List : listval,\r\n            InputVal : \"\",\r\n            EditVal : \"\",\r\n            editID: 0,\r\n            isEdit : false\r\n        }\r\n\r\n    }\r\n    getDate=()=>{\r\n        let today = new Date()\r\n        // the time user inserted the value\r\n        return  `${this.AddZero(today.getDate())}/${this.AddZero(today.getMonth()+1)} | ${this.AddZero(today.getHours())}:${this.AddZero(today.getMinutes())}:${this.AddZero(today.getSeconds())}`\r\n    }\r\n    // Adding Zero to Time value with single digit\r\n    AddZero=(val)=>{\r\n        val = (val<10)? \"0\" + val : val;\r\n        return val\r\n    }\r\n    // Adding User value to List\r\n    handleAddBtn=()=>{\r\n        // the value should not be Empty \r\n        if(this.state.InputVal!==''){\r\n            const date = this.getDate()\r\n            // objID should be unique so ID will be increment of previous ID if previous ID is not defined the 1\r\n            let objID = this.state.List.length===0?1:this.state.List[this.state.List.length-1].ID+1\r\n            let updatedList = this.state.List\r\n            // Updating the list\r\n            updatedList.push({\r\n                date,\r\n                Val: this.state.InputVal,\r\n                ID: objID\r\n            })\r\n            this.setState({List: updatedList,InputVal: ''},()=>localStorage.setItem(\"list\",JSON.stringify(this.state.List)))\r\n        }\r\n    }\r\n    // give result on Enter keypress\r\n    handleKeyPress=(event)=>{\r\n        if(event.key==='Enter'){\r\n            this.handleAddBtn()\r\n        }\r\n    }\r\n    // assign user input value to InputVal\r\n    handleInputChange=(event)=>{\r\n        this.setState({InputVal:event.target.value})\r\n    }\r\n    \r\n    // filter the list and remove element of given id\r\n    handleDelete=id=>{\r\n       const updatedList = this.state.List.filter(item=>item.ID!==id)\r\n       this.setState({List: updatedList},()=>localStorage.setItem(\"list\",JSON.stringify(this.state.List)))\r\n    }\r\n\r\n    handleEditChange=(event)=>{\r\n        this.setState({EditVal:event.target.value})\r\n    }\r\n\r\n    handleEditBtn=(ID)=>{\r\n        this.setState({isEdit: true,editID: ID})\r\n    }\r\n    handleEditKeyPress=(event)=>{\r\n        if(event.key==='Enter'){\r\n            this.AddEditedValue()\r\n        }\r\n    }\r\n    AddEditedValue=()=>{\r\n        let tempList = this.state.List\r\n        for(let i=0; i<this.state.List.length; i++){\r\n            if(tempList[i].ID===this.state.editID){\r\n                tempList[i].Val = this.state.EditVal\r\n                break\r\n            }\r\n        }\r\n        this.setState({List: tempList,isEdit: false,EditVal: ''},()=>localStorage.setItem(\"list\",JSON.stringify(this.state.List)))\r\n    }\r\n\r\n    render() {\r\n        const {List, InputVal} = this.state\r\n        return (\r\n            <div className=\"ListItems\">\r\n              <h3 className=\"heading\">Todo List</h3>\r\n\r\n              <Input  \r\n                InputVal={InputVal}  \r\n                handleAddBtn={this.handleAddBtn} \r\n                handleInputChange={this.handleInputChange} \r\n                handleKeyPress={this.handleKeyPress}\r\n                />\r\n              \r\n              <Table list={List} handleDelete={this.handleDelete} handleEdit={this.handleEditBtn} isEdit={this.state.isEdit} >\r\n                  <Input \r\n                    InputVal={this.state.EditVal} \r\n                    handleAddBtn={this.AddEditedValue} \r\n                    handleInputChange={this.handleEditChange}\r\n                    placeholder='edit'\r\n                    handleKeyPress={this.handleEditKeyPress}\r\n                    />\r\n              </Table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Todo from './Todo-List/TodoList.jsx'\nfunction App(){\n  return(\n    <Todo/>\n  )\n}\n\nReactDOM.render(<App/>,document.getElementById(\"root\"));\n"],"sourceRoot":""}